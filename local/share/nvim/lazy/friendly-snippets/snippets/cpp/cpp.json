{
    "include": {
        "prefix": "in",
        "body": [
            "#include \"bits/stdc++.h\"",
            "using namespace std;",
            "const int M = 1e9 + 7;",
            "#define int long long",
            "int T;",
            "//----------------------------stderr------------------------------",
            "#define DEV(x...) { cerr << '('; DEVV(#x, x); }",
            "template<typename T> void DEVV(const char* name, T value) { cerr << name << \" = \" << value << ')' << endl; }",
            "template<typename T1, typename... T2> void DEVV(const char* names, T1 t1, T2... t2) { const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << \" = \" << t1 << \",\";DEVV(comma + 1, t2...); }",
            "//----------------------------------------------------------------",
            "#define dev(x...) { cout << '('; Debug(#x, x); }",
            "#define print(x) _print(#x, x)",
            "template<typename T> void Debug(const char* name, T value) { cout << name << \" = \" << value << ')' << endl; }",
            "template<typename T1, typename... T2> void Debug(const char* names, T1 t1, T2... t2) { const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << \" = \" << t1 << \",\";Debug(comma + 1, t2...); }",
            "template<class T> void _print(string name, vector<T>& v) { cout << name << \"[ \";for (auto it : v) cout << it << ' '; cout << \"]\" << endl; }",
            "template<class T> void vout(vector<T>& v) { for (auto& it : v) cout << it << ' '; cout << endl; }",
            "template<class T> void _print(string name, vector<vector<T>>& v) { int cnt = 0; cout << name << \"[\"; for (int j = 0; j < v.size(); j++) { if (cnt != 0) cout << ' '; cout << \"[ \"; for (int i = 0; i < v[j].size(); i++) { cout << v[j][i] << ' '; if (i == v[j].size() - 1) cout << ']'; } if (j == v.size() - 1) { cout << ']' << endl; } else cout << endl; cnt++; } }",
            "template<class T> void _print(string name, set<T>& st) { cout << name << \"[ \"; for (auto& it : st) cout << it << ' ';cout << ']' << endl; }",
            "template<class T> void _print(string name, T val) { cout << val << endl; }",
            "template<class T> void _print(string name, queue<T>& q) { cout << name << \"[ \"; queue<T> temp = q; while (temp.size()) { cout << temp.front(), temp.pop();cout << ' '; } cout << ']' << endl; }",
            "template<class T> void _print(string name, multiset<T>& st) { cout << name << \"[ \";for (auto& it : st) cout << it << \" \";cout << ']' << endl; }",
            "template<class K, class V> void _print(string name, set<pair<K, V>>& st) { cout << name << ':' << endl; for (auto& it : st) cout << \"[ \" << it.first << ',' << it.second << \" ]\" << endl; }",
            "template<class K, class V> void _print(string name, queue<pair<K, V>> q) { cout << name << ':' << endl; while (q.size()) { cout << '[' << q.front().first << ',' << q.front().second << ']' << endl; q.pop(); } }",
            "template<class K, class V> void _print(string name, pair<K, V>& p) { cout << name << \"::{\" << p.first << ',' << p.second << '}' << endl; }",
            "template<class K, class V> void _print(string name, vector<pair<K, V>>& vp) { cout << name << ':' << endl; for (auto& it : vp) cout << '{' << it.first << \", \" << it.second << '}' << endl; }",
            "template<class K, class V> void _print(string s, multiset<pair<K, V>> st) { cout << s << ':' << endl; for (auto& it : st) cout << '{' << it.first << ',' << it.second << '}' << endl; }",
            "template<class K, class V> void _print(string name, map<K, V>& mp) { cout << name << ':' << endl; for (auto& it : mp) cout << it.first << \" => \" << it.second << endl; }",
            "template<class K, class V> void _print(string name, unordered_map<K, V>& mp) { cout << name << ':' << endl; for (auto& it : mp) cout << it.first << \" => \" << it.second << endl; }",
            "template<class K, class V> void _print(string name, multimap<K, V>& mp) { cout << name << ':' << endl; for (auto it : mp) cout << '{' << it.first << ',' << it.second << '}' << endl; }",
            "void printgraph(vector<int> adj[], int nodeCnt) { for (int node = 0; node < nodeCnt; node++) { cout << \"node: \" << node << \" | \"; for (auto it : adj[node]) cout << it << ','; cout << endl; } }",
            "//--------------------------------------------------------------------------------------------------",
            "",
            "void solve() {",
            "    $0",
            "}",
            "",
            "signed main() {",
            "    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);",
            "#ifndef ONLINE_JUDGE",
            "    (void)! freopen(\"input.txt\", \"r\", stdin); (void)! freopen(\"output.txt\", \"w\", stdout);",
            "#endif",
            "    int t = 1;",
            "    cin >> t;$1",
            "    for(T = 1; T <= t; T++) {",
            "        solve();",
            "    }",
            "}"
        ],
        "description": "include"
    },
    "helperFunctions": {
        "prefix": "helper",
        "body": [
            "//------------------------HELPER-------------------------",
            "#define rep(i, a, b) for(int i = a; i < b; i++)",
            "#define repr(i, a, b) for(int i = a; i>= b; i--)",
            "typedef vector<int> vint;",
            "vector<string> strtok(string s, char delimiter) { vector<string> vs; stringstream ss(s); string word; while (!ss.eof()) { getline(ss, word, delimiter); vs.push_back(word); } return vs; }",
            "vint   presum(vint& v) { vint pre = { 0 }; for (auto& it : v) pre.push_back(pre.back() + it); return pre; }",
            "vint   sufsum(vint& v) { vint temp = { 0 }; for (int i = v.size() - 1; i >= 0; i--) { temp.push_back(temp.back() + v[i]); } reverse(begin(temp), end(temp)); return temp; }",
            "int    digitsum(int n) { int sum = 0; while (n) { sum += n % 10; n /= 10; } return sum; }",
            "bool   issquare(long double x) { if (x >= 0) { long long sr = sqrt(x);return (sr * sr == x); }return false; }",
            "bool   ispow2(int x) { return (x ? !(x & (x - 1)) : 0); }",
            "bool   isvow(char ch) { ch = tolower(ch); return ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u'; }",
            "bool   iscons(char ch) { return ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z')) and !isvow(ch); }",
            "bool   isdigit(char ch) { return ch >= '0' and ch <= '9'; }",
            "int    fact(int n) { int res = 1; for (int i = 2; i <= n; i++) res = (res * i) % M; return res % M; } // modulated",
            "int    computeXOR(int n) { if (n % 4 == 0) { return n; }if (n % 4 == 1) { return 1; }if (n % 4 == 2) { return n + 1; }return 0; } // xor of all element till n",
            "vint   commonElement(vint& a, vint& b, vint& c) { int n1 = a.size(), n2 = b.size(), n3 = c.size(), i = 0, j = 0, k = 0; vint v;while (i < n1 && j < n2 && k < n3) { if (a[i] == b[j] && b[j] == c[k]) { v.push_back(a[i]); i++;j++;k++; } else if (a[i] < b[j]) { i++; } else if (b[j] < c[k]) { j++; } else { k++; }int xx = a[i - 1], yy = b[j - 1], zz = c[k - 1];while (a[i] == xx) { i++; }while (b[j] == yy) { j++; }while (c[k] == zz) { k++; } }if (v.size() == 0) { return { -1 }; }return v; }// O(n1+n2+n3)//a,b,c provided sorted",
            "vint   random(int min, int max, int n) { if (min > max) swap(min, max);random_device rd;mt19937 rng(rd());uniform_int_distribution<int> dist(min, max);vint v;for (int i = 0; i < n; ++i) v.push_back(dist(rng)); return v; }",
            "string bin(int num) { int n = (int)(log2(num)); return bitset<64>(num).to_string().substr(64 - n - 1); }",
            "string dectobin(int n, int digits = 32) { string ans; for (int i = digits - 1; i >= 0; i--) { int k = n >> i; if (k & 1) { ans.push_back('1'); } else { ans.push_back('0'); } } return ans; }",
            "vint   divisors(int n) { vint ans; for (int i = 1; i <= sqrt(n); i++) { if (n % i == 0) { if (n / i == i) ans.push_back(i); else ans.push_back(n / i), ans.push_back(i); } } return ans; }// O(sqrt(n))",
            "int    modInverse(int A, int mod = M) { int m0 = mod, y = 0, x = 1; if (mod == 1) return 0; while (A > 1) { int q = A / mod; int t = mod; mod = A % mod, A = t; t = y; y = x - q * y; x = t; } if (x < 0) x += m0; return x; }",
            "int    nCr(int n, int r, int p = M) { if (n < r) return 0; if (r == 0) return 1; vector<int> fac(n + 1, 0); fac[0] = 1; for (int i = 1; i <= n; i++) { fac[i] = (fac[i - 1] * i) % p; } return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p; }// modulated result, factorial array is caculated till n, every time ncr is called",
            "int    nPr(int n, int r, int p = M) { if (n < r) return 0; if (r == 0) return 1; vector<int> fac(n + 1, 0); fac[0] = 1; for (int i = 1; i <= n; i++) { fac[i] = (fac[i - 1] * i) % p; } return ((fac[n] % p) * (modInverse(fac[n - r], p) % p)) % p; }// modulated result, factorial array is caculated till n, every time nPr is called, which can be optimized if we create fac vector globally",
            "template<class T> T gcd(T x, T y) { return (x ? gcd(y % x, x) : y); }",
            "template<class T> T lcm(T x, T y) { return x / gcd(x, y) * y; }",
            "template<class T> T power(T x, int n) { T result = 1; while (n > 0) { if (n & 1) { result = result * x; } x = x * x; n = n >> 1; } return result; }",
            "template<class T> T binaryPower(T x, int n, int mod = M) { long long result = 1; while (n) { if (n & 1) result = (result * x) % mod; x = (x * x) % mod; n >>= 1; } return result; }",
            "template<class T> void vin(vector<T>& v, int n) { rep(i, 0, n) { T x; cin >> x; v.pb(x); } }",
            "template<class T, class K> void vin(vector<pair<K, T>>& vp, int n) { rep(i, 0, n) { T l; K r; cin >> l >> r; vp.pb({ l, r }); } }",
            "inline int divide(int a, int b, int mod = M) { a = a % mod; int inv = modInverse(b, mod); return (inv * a) % mod; }// if inv == -1, division not defined",
            "inline int product(int a, int b, int mod = M) { return ((a % mod) * (b % mod)) % mod; }// check if mod is correct",
            "inline int add(int a, int b, int mod = M) { return (a % mod + b % mod) % mod; }",
            "inline int sub(int a, int b, int mod = M) { int ans = (a % mod - b % mod) % mod; if (ans < 0) ans += mod; return ans; }",
            "$0//----------------------------------------------------------------------------"
        ],
        "description": "helperFunctions"
    }
}
